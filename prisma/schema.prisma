generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    medicTokens   MedicToken[] @relation("MedicTokens") // Tokens where user is the medic
    clientTokens  MedicToken[] @relation("ClientTokens") // Tokens where user is the client
}

model Chat {
    id Int @id @default(autoincrement())
    
    medicTokenId String
    medicToken   MedicToken @relation(fields: [medicTokenId], references: [id])
    
    messages     Message[]  @relation("ChatMessages")
    createdAt    DateTime   @default(now())
}

model Message {
    id      Int      @id @default(autoincrement())
    chatId  Int
    sender  String
    content String // "doc", "bot", "user"
    status  String // "pending", "confirmed"
    sentAt  DateTime @default(now())

    chat Chat @relation("ChatMessages", fields: [chatId], references: [id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model MedicToken {
    id     String  @id @default(cuid())
    token  String  @unique
    isUsed Boolean @default(false)

    // Relation to Medic User
    medicId String
    medic   User   @relation("MedicTokens", fields: [medicId], references: [id], onDelete: Cascade)

    // Relation to Client User
    clientId String?
    client   User?   @relation("ClientTokens", fields: [clientId], references: [id], onDelete: SetNull)

    // Relation to Chats
    chats    Chat[]
}
